{
  "name": "soap",
  "version": "0.6.0",
  "description": "A minimal node SOAP client",
  "engines": {
    "node": ">=0.8.0"
  },
  "author": {
    "name": "Vinay Pulim",
    "email": "v@pulim.com"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "request": ">=2.9.0",
    "sax": ">=0.6",
    "strip-bom": "~0.3.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/milewise/node-soap.git"
  },
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "scripts": {
    "pretest": "jshint index.js lib test",
    "test": "mocha test/*-test.js test/security/*.js"
  },
  "keywords": [
    "soap"
  ],
  "licenses": [
    {
      "type": "MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "devDependencies": {
    "mocha": "~1.17.0",
    "jshint": "2.3.0",
    "glob": "~3.2.8",
    "should": "~3.3.0",
    "timekeeper": "~0.0.4"
  },
  "readme": "# Soap [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url]\n> A SOAP client and server for node.js.\n\nThis module lets you connect to web services using SOAP.  It also provides a server that allows you to run your own SOAP services.\n\n## Features:\n\n* Very simple API\n* Handles both RPC and Document schema types\n* Supports multiRef SOAP messages (thanks to [@kaven276](https://github.com/kaven276))\n* Support for both synchronous and asynchronous method handlers\n* WS-Security (currently only UsernameToken and PasswordText encoding is supported)\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n```\n  npm install soap\n```\n## Module\n\n### soap.createClient(url[, options], callback) - create a new SOAP client from a WSDL url. Also supports a local filesystem path.\n\n``` javascript\n  var soap = require('soap');\n  var url = 'http://example.com/wsdl?wsdl';\n  var args = {name: 'value'};\n  soap.createClient(url, function(err, client) {\n      client.MyFunction(args, function(err, result) {\n          console.log(result);\n      });\n  });\n```\n\nWithin the options object you may provide an `endpoint` property in case you want to override the SOAP service's host specified in the `.wsdl` file.\n\n### soap.listen(*server*, *path*, *services*, *wsdl*) - create a new SOAP server that listens on *path* and provides *services*.\n*wsdl* is an xml string that defines the service.\n\n``` javascript\n  var myService = {\n      MyService: {\n          MyPort: {\n              MyFunction: function(args) {\n                  return {\n                      name: args.name\n                  };\n              }\n\n              // This is how to define an asynchronous function.\n              MyAsyncFunction: function(args, callback) {\n                  // do some work\n                  callback({\n                      name: args.name\n                  })\n              }\n          }\n      }\n  }\n\n  var xml = require('fs').readFileSync('myservice.wsdl', 'utf8'),\n      server = http.createServer(function(request,response) {\n          response.end(\"404: Not Found: \"+request.url)\n      });\n\n  server.listen(8000);\n  soap.listen(server, '/wsdl', myService, xml);\n```\n\n### server logging\n\nIf the log method is defined it will be called with 'received' and 'replied'\nalong with data.\n\n``` javascript\n  server = soap.listen(...)\n  server.log = function(type, data) {\n    // type is 'received' or 'replied'\n  };\n```\n\n### server security example using PasswordDigest\n\nIf server.authenticate is not defined no authentation will take place.\n\n``` javascript\n  server = soap.listen(...)\n  server.authenticate = function(security) {\n    var created, nonce, password, user, token;\n    token = security.UsernameToken, user = token.Username,\n            password = token.Password, nonce = token.Nonce, created = token.Created;\n    return user === 'user' && password === soap.passwordDigest(nonce, created, 'password');\n  };\n```\n\n### server connection authorization\n\nThis is called prior to soap service method\nIf the method is defined and returns false the incoming connection is\nterminated.\n\n``` javascript\n  server = soap.listen(...)\n  server.authorizeConnection = function(req) {\n    return true; // or false\n  };\n```\n\n\n## Client\n\nAn instance of Client is passed to the soap.createClient callback.  It is used to execute methods on the soap service.\n\n### Client.describe() - description of services, ports and methods as a JavaScript object\n\n``` javascript\n  client.describe() // returns\n    {\n      MyService: {\n        MyPort: {\n          MyFunction: {\n            input: {\n              name: 'string'\n            }\n          }\n        }\n      }\n    }\n```\n\n### Client.setSecurity(security) - use the specified security protocol\n`node-soap` has several default security protocols.  You can easily add your own\nas well.  The interface is quite simple.  Each protocol defines 2 methods:\n* addOptions - a method that accepts an options arg that is eventually passed directly to `request`\n* toXML - a method that reurns a string of XML.\n\nBy default there are 3 protocols:\n\n####BasicAuthSecurity\n\n``` javascript\n  client.setSecurity(new soap.BasicAuthSecurity('username', 'password'));\n```\n\n####ClientSSLSecurity\n_Note_: If you run into issues using this protocol, consider passing these options\nas default request options to the constructor:\n* rejectUnauthorized: false\n* strictSSL: false\n* secureOptions: constants.SSL_OP_NO_TLSv1_2//this is likely needed for node >= 10.0\n\n``` javascript\n  client.setSecurity(new soap.ClientSSLSecurity(\n    '/path/to/key'\n    , '/path/to/cert'\n    , {/*default request options*/}\n  ));\n```\n\n####WSSecurity\n\n``` javascript\n  client.setSecurity(new soap.WSSecurity('username', 'password'))\n```\n\n####BearerSecurity\n\n``` javascript\n  client.setSecurity(new soap.BearerSecurity('token'));\n```\n\n### Client.*method*(args, callback) - call *method* on the SOAP service.\n\n``` javascript\n  client.MyFunction({name: 'value'}, function(err, result) {\n      // result is a javascript object\n  })\n```\n### Client.*service*.*port*.*method*(args, callback[, options]) - call a *method* using a specific *service* and *port*\n\n``` javascript\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\n      // result is a javascript object\n  })\n```\n+#### Options (optional)\n - Accepts any option that the request module accepts, see [here.](https://github.com/mikeal/request)\n - For example, you could set a timeout of 5 seconds on the request like this:\n``` javascript\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\n      // result is a javascript object\n  }, {timeout: 5000})\n```\n\n### Client.*addSoapHeader*(soapHeader[, name, namespace, xmlns]) - add soapHeader to soap:Header node\n#### Options\n\n - `soapHeader`     Object({rootName: {name: \"value\"}}) or strict xml-string\n\n##### Optional parameters when first arg is object :\n - `name`           Unknown parameter (it could just a empty string)\n - `namespace`      prefix of xml namespace\n - `xmlns`          URI\n\n### Client.*lastRequest* - the property that contains last full soap request for client logging\n\n## WSSecurity\n\nWSSecurity implements WS-Security.  UsernameToken and PasswordText/PasswordDigest is supported. An instance of WSSecurity is passed to Client.setSecurity.\n\n``` javascript\n  new WSSecurity(username, password, passwordType)\n    //'PasswordDigest' or 'PasswordText' default is PasswordText\n```\n\n## Handling XML Attributes and Value (wsdlOptions).\nSometimes it is necessary to override the default behaviour of `node-soap` in order to deal with the special requirements\nof your code base or a third library you use. Therefore you can use the `wsdlOptions` Object, which is passed in the\n`#createClient()` method and could have any (or all) of the following contents:\n```javascript\nvar wsdlOptions = {\n  attributesKey: 'theAttrs',\n  valueKey: 'theVal'\n}\n```\nIf nothing (or an empty Object `{}`) is passed to the `#createClient()` method, the `node-soap` defaults (`attributesKey: 'attributes'`\n and `valueKey: '$value'`) are used.\n\n###Overriding the `value` key\nBy default, `node-soap` uses `$value` as key for any parsed XML value which may interfere with your other code as it\ncould be some reserved word, or the `$` in general cannot be used for a key to start with.\n\nYou can define your own `valueKey` by passing it in the `wsdl_options` to the createClient call like so:\n```javascript\nvar wsdlOptions = {\n  valueKey: 'theVal'\n};\n\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\n  // your code\n});\n```\n\n###Overriding the `attributes` key\nYou can achieve attributes like:\n``` xml\n<parentnode>\n  <childnode name=\"childsname\">\n  </childnode>\n</parentnode>\n```\nBy attaching an attributes object to a node.\n``` javascript\n{\n  parentnode: {\n    childnode: {\n      attributes: {\n        name: 'childsname'\n      }\n    }\n  }\n}\n```\nHowever, \"attributes\" may be a reserved key for some systems that actually want a node\n```xml\n<attributes>\n</attributes>\n```\n\nIn this case you can configure the attributes key in the `wsdlOptions` like so.\n```javascript\nvar wsdlOptions = {\n  attributesKey: '$attributes'\n};\n\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\n  client.*method*({\n    parentnode: {\n      childnode: {\n        $attributes: {\n          name: 'childsname'\n        }\n      }\n    }\n  });\n});\n```\n\n## Handling \"ignored\" namespaces\nIf an Element in a `schema` definition depends on an Element which is present in the same namespace, normally the `tns:`\nnamespace prefix is used to identify this Element. This is not much of a problem as long as you have just one `schema` defined\n(inline or in a separate file). If there are more `schema` files, the `tns:` in the generated `soap` file resolved mostly to the parent `wsdl` file,\n which was obviously wrong.\n\n `node-soap` now handles namespace prefixes which shouldn't be resolved (because it's not necessary) as so called `ignoredNamespaces`\n which default to an Array of 3 Strings (`['tns', 'targetNamespace', 'typedNamespace']`).\n\n If this is not sufficient for your purpose you can easily add more namespace prefixes to this Array, or override it in its entirety\n by passing an `ignoredNamespaces` object within the `options` you pass in `soap.createClient()` method.\n\n A simple `ignoredNamespaces` object, which only adds certain namespaces could look like this:\n ```\n var options = {\n   ignoredNamespaces: {\n     namespaces: ['namespaceToIgnore', 'someOtherNamespace']\n   }\n }\n ```\n This would extend the `ignoredNamespaces` of the `WSDL` processor to `['tns', 'targetNamespace', 'typedNamespace', 'namespaceToIgnore', 'someOtherNamespace']`.\n\n If you want to override the default ignored namespaces you would simply pass the following `ignoredNamespaces` object within the `options`:\n ```\n var options = {\n     ignoredNamespaces: {\n       namespaces: ['namespaceToIgnore', 'someOtherNamespace'],\n       override: true\n     }\n   }\n ```\n This would override the default `ignoredNamespaces` of the `WSDL` processor to `['namespaceToIgnore', 'someOtherNamespace']`. (This shouldn't be necessary, anyways).\n\n## Contributors\n\n * Author: [Vinay Pulim](https://github.com/vpulim)\n * Lead Maintainer: [Joe Spencer](https://github.com/jsdevel)\n * [All Contributors](https://github.com/vpulim/node-soap/graphs/contributors)\n\n[downloads-image]: http://img.shields.io/npm/dm/soap.svg\n[npm-url]: https://npmjs.org/package/soap\n[npm-image]: http://img.shields.io/npm/v/soap.svg\n\n[travis-url]: https://travis-ci.org/vpulim/node-soap\n[travis-image]: http://img.shields.io/travis/vpulim/node-soap.svg\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/milewise/node-soap/issues"
  },
  "homepage": "https://github.com/milewise/node-soap",
  "_id": "soap@0.6.0",
  "dist": {
    "shasum": "85548d9d2f425b8133b976ca11dc82c2019d7917"
  },
  "_from": "soap@",
  "_resolved": "https://registry.npmjs.org/soap/-/soap-0.6.0.tgz"
}
